#+TITLE: Dopace(a emacs configuration)
#+DESCRIPTION: Doom Look and Spacemacs Power orgnized by Org and Use-package
#+AUTHOR: jijing
#+EMAIL: goco.v@163.com
#+LATEX_HEADER: \usepackage[UTF8]{ctex}
#+STARTUP: indent

* Introduction
** why Emacs
Learning Once Use Decades 
** why Org-config
*** why not Spacemacs
** about author
*** Main-language
- Verilog
- Scala
- Python
- C
- Chisel
*** Info-config
#+BEGIN_SRC emacs-lisp
(setq user-full-name "JijingGuo"
      user-name "Jijing"
      current-company "PineCone.ltd"
      user-company-email "JijingGuo@pinecone.net")
#+END_SRC

* Basic-Config
** Initial-start
*** ELPA source
Use-package allows for isolation of package configuration, while
maintaining tidiness and performance.
#+BEGIN_SRC emacs-lisp
(when (>= emacs-major-version 24)
  (require 'package)
  (package-initialize)
  (setq package-archives '(
      ("melpa"  .  "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
      ("gnu"    .  "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
      ("org"    .  "http://mirrors.tuna.tsinghua.edu.cn/elpa/org/")))
)

(defun packages-require (&rest packs)
  "Install and load a package. If the package is not available
   installs it automaticaly."
  (mapc  (lambda (package)
           (unless (package-installed-p package)
                   (package-refresh-contents)
                   (package-install package)
                   ))
         packs
         ))

;(packages-require
; use-package
; evil-leader
; )
(unless (package-installed-p 'use-package)
        (package-install 'use-package))
;默认对所有的包先检查后下载
(setq use-package-always-ensure t)
;ensure nil 表示不下载，用当前elpa路径下的包 , 对于built-in 或者本地第三方
;package 加上 :ensure nil 或者 :load-path就行了

; (unless (package-installed-p 'use-package)
;   (package-refresh-contents)
;   (package-install 'use-package))
;
; (require 'use-package)
; (setq use-package-always-ensure t)
;

(use-package exec-path-from-shell
  :ensure t
  :if (memq window-system '(mac ns x))
  :config
  (exec-path-from-shell-initialize))
#+END_SRC

*** evil-mode
有时候在某些mode下比如verilog-mode，input关键字后Esc不是退出Insert模式，而是会触发Abbrev
这个需要在evil-mode启动之前设置=(setq evil-want-abbrev-expand-on-insert-exit nil)=
即放在initial中即可。
为了保证evil-mode在它的关联模块之前启动，需要将其安置到其关联模块之前比如（evil-leader）之前
#+BEGIN_SRC emacs-lisp
  (use-package evil
        :ensure t
        :init
        (setq evil-want-abbrev-expand-on-insert-exit nil) ; Disable Esc as abbrev prefix in any-mode
        :config
        (evil-mode t))
;        :hook (after-init . evil-mode))
#+END_SRC

*** evil-leader
Enable evil-leader First
#+BEGIN_SRC emacs-lisp
(use-package evil-leader
    :config
    (global-evil-leader-mode)
    (evil-leader/set-leader "<SPC>")
)
#+END_SRC

** BaseConfig
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(tool-bar-mode -1)
(display-time-mode 1)
(menu-bar-mode -1)

;;自动加载文件改动
(global-auto-revert-mode 1)

;;设置问答提示为 y-or-n,而不是yes-or-no
(fset 'yes-or-no-p 'y-or-n-p)   

(scroll-bar-mode -1)

(add-hook 'emacs-lisp-mode-hook 'show-paren-mode)

(prefer-coding-system 'utf-8)
(setq default-buffer-file-coding-system 'utf-8)

(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq indent-line-function 'insert-tab)

(setq make-backup-files nil)		; xxx.xx~
(setq auto-save-default nil)		; #xxx.xx#

(require 'recentf)
(recentf-mode 1)
(global-set-key (kbd "C-c a")  'org-agenda)
(global-set-key (kbd "C-c c")  'org-capture)
#+END_SRC

** Start-Message
#+BEGIN_SRC emacs-lisp
;(setq inhibit-startup-message t)
#+END_SRC

* OS-setup
** Install
*** Windows
安装好Emacs以后，修改注册表将默认路径指向安装路径：
找到HKEY_LOCAL_MACHINE\SOFTWARE\GNU\Emacs（如果没有则手动添加项），
在此项下添加字符串值，名称为HOME，值为安装路径（如D:\Program\emacs-26.2)

windows add cygwin-zshell
#+BEGIN_SRC emacs-lisp
(defun cygwin-shell ()
  "Run cygwin bash in shell mode."
  (interactive)
  (let ((explicit-shell-file-name "C:/Users/Administrator/.babun/cygwin/bin/zsh"))
    (call-interactively 'shell))
)
#+END_SRC

*** MacOS
** os-init

很多时候我们需要跨平台的支持，比如可能个人电脑是mac，公司用的是windows,工作开发又在linux上。
不可能每一个系统都配置一份dotfile. 因此我们将不同OS上不同的部分单独拎出来作为不同的初始化函数
启动时通过system-type来判断操作系统类型来加载不同的配置。当然不限于来区分操作系统，也可以区分
不同的电脑，这里本人目前没有这个需求。如果有需求可以加上。

#+BEGIN_SRC emacs-lisp
(defun windows-setup ()
    (setq
    font-height 110
    font-size 13
    org-plantuml-jar-path (expand-file-name "d:/Program/emacs-26.2/plantuml.jar")
    default-directory "D:/Program/emacs-26.2/"
    lib-directory "D:/Program/"
    emacs-d-root "D:/Program/emacs-26.2/.emacs.d/"
    os-shell-root "c:/Users/Administrator/.babun/cygwin/bin/"
    config-base-dir "E:/nutstore/2017pc")
    (message "windows-setup done!")
    )

(defun mac-os-setup ()
    (setq
    font-height 160
    font-size 14
    org-plantuml-jar-path (expand-file-name "~/local/lib/plantuml.jar")
    default-directory "~/work"
    lib-directory "~/work/"
    emacs-d-root "~/.emacs.d/"
    os-shell-root "/bin/"
    config-base-dir "~/nutstore/2017pc")
    (message "mac-os-setup done!")
    )

(defun linux-setup ()
    (setq
    font-height 120
    font-size 13
    org-plantuml-jar-path (expand-file-name "~/local/lib/plantuml.jar")
    default-directory "~/work"
    lib-directory "~/work/"
    emacs-d-root "~/.emacs.d/"
    os-shell-root "/usr/bin/"
    config-base-dir "~/lab/")
    (message "linux-setup done!")
    )

(cl-case system-type
    (windows-nt  (windows-setup ))
    (darwin      (mac-os-setup  ))
    (gnu/linux   (linux-setup   ))
)
(setq
    org-agenda-dir  (concat config-base-dir "/org/")
    )

#+END_SRC

** Font-config
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
  :family "Consolas" :height font-height)

;; Setting Chinese Font
(dolist (charset '(kana han symbol cjk-misc bopomofo))
  (set-fontset-font (frame-parameter nil 'font)
            charset
            (font-spec :family "Microsoft Yahei" :size font-size)))
#+END_SRC

* Utils
** loop-alpha
#+BEGIN_SRC emacs-lisp
(setq alpha-list '((85 55) (100 100)))
(defun dopace-loop-alpha ()
  (interactive)
  (let ((h (car alpha-list)))
    ((lambda (a ab)
       (set-frame-parameter (selected-frame) 'alpha (list a ab))
       (add-to-list 'default-frame-alist (cons 'alpha (list a ab)))
       ) (car h) (car (cdr h)))
    (setq alpha-list (cdr (append alpha-list (list h))))
    ))

(evil-leader/set-key
    "ta" 'dopace-loop-alpha
    "tF" 'toggle-frame-fullscreen
)
#+END_SRC

** open-config-file
#+BEGIN_SRC emacs-lisp
(defun dopace-utils/open-init-config-file ()
  "Show FAQ and launch swiper session."
  (interactive)
  (find-file
   (expand-file-name "dopace.org" (concat config-base-dir "/emacs/dopace/"))))

(defun dopace-utils/reload-dopace-config ()
  (interactive)
  (load-file 
  (expand-file-name "init.el" emacs-d-root)))

(evil-leader/set-key
 "fi" 'dopace-utils/open-init-config-file
; "fR" 'dopace-utils/reload-dopace-config
)

(defun dopace-utils/open-custom-file ()
  "Show FAQ and launch swiper session."
  (interactive)
  (find-file-read-only
   (expand-file-name "custom.el" "~/.emacs.d/"))
  (swiper "veriable"))

#+END_SRC

#+begin_src
(defun dotspacemacs/sync-configuration-layers (&optional arg)
  "Synchronize declared layers in dotfile with spacemacs.

Called with `C-u' skips `dotspacemacs/user-config'.
Called with `C-u C-u' skips `dotspacemacs/user-config' _and_ preleminary tests."
  (interactive "P")
  (when (file-exists-p dotspacemacs-filepath)
    (with-current-buffer (find-file-noselect dotspacemacs-filepath)
      (let ((dotspacemacs-loading-progress-bar nil))
        (setq spacemacs-loading-string "")
        (save-buffer)
        (let ((tests-ok (or (equal arg '(16)) (dotspacemacs/test-dotfile t))))
          (if tests-ok
              (progn
                (load-file buffer-file-name)
                (dotspacemacs|call-func dotspacemacs/init
                                        "Calling dotfile init...")
                (dotspacemacs|call-func dotspacemacs/user-init
                                        "Calling dotfile user init...")
                (setq dotspacemacs-editing-style
                      (dotspacemacs//read-editing-style-config
                       dotspacemacs-editing-style))
                (configuration-layer/sync)
                (if (member arg '((4) (16)))
                    (message (concat "Done (`dotspacemacs/user-config' "
                                     "function has been skipped)."))
                  (dotspacemacs|call-func dotspacemacs/user-config
                                          "Calling dotfile user config...")
                  (run-hooks 'spacemacs-post-user-config-hook)
                  (message "Done.")))
            (switch-to-buffer-other-window dotspacemacs-test-results-buffer)
            (spacemacs-buffer/warning "Some tests failed, check `%s' buffer"
                                      dotspacemacs-test-results-buffer))))))
  (when (configuration-layer/package-usedp 'spaceline)
    (spacemacs//set-powerline-for-startup-buffers)))
#+end_src

** Hide Source block as defualt Org-mode
#+begin_src elisp
(defun dopace-visibility-source-blocks ()
  "Fold some blocks in the current buffer."
  (interactive)
  (org-show-block-all)
  (org-block-map
   (lambda ()
     (let ((case-fold-search t))
       (when (and
              (save-excursion
                (beginning-of-line 1)
                (looking-at org-block-regexp))
              (cl-assoc
               ':hidden
               (cl-third
                (org-babel-get-src-block-info))))
         (org-hide-block-toggle))))))

(add-hook 'org-mode-hook 'dopace-visibility-source-blocks)
#+end_src

* Package-Manager
** Packages
*** modeline

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
  :ensure t
  :hook (after-init . doom-modeline-mode)
  :config
  (setq doom-modeline-bar-width 4)
  ;(setq doom-modeline-height 20)
)
#+END_SRC

*** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
    :ensure t
    :config
    (which-key-mode +1)
)
#+END_SRC
with ivy 
*** doom-theme
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
:disabled t
:config
(load-theme 'doom-one 1)
)
#+END_SRC
defualt coding theme
*** ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
:ensure t
:config
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
(global-set-key "\C-s" 'swiper)
(global-set-key "\M-x" 'counsel-M-x)
(evil-leader/set-key
    "ff"  'counsel-find-file
    "fb"  'counsel-bookmark
    "fr"  'counsel-recentf
    "rl"  'ivy-resume
  )
)
#+END_SRC
默认没有历史记录， M-x M-p 会调出历史记录
*** smex
#+BEGIN_SRC  emacs-lisp
(use-package smex
:ensure t
)
#+END_SRC
for ivy history using 
*** evil-leader
*** eyebrowse
#+BEGIN_SRC emacs-lisp
  (use-package eyebrowse
    :after (ivy hydra)
    :init
    (setq eyebrowse-new-workspace t
          eyebrowse-wrap-around t)
    :config
    (eyebrowse-mode)
    (defhydra hydra-workspace-menu (:color pink
                                    :idle 1.0 ;delay 1.0s
                                    :hint nil)
    "
    ───────────────────────────────────────────────────────
    _0_.._9_         nth/new workspace  _d_ close current workspace
    _<tab>_/_l_      last workspace     _r_ rename current workspace
    _n_^^            next workspace     _p_ prev workspace\n
    "
        ("p" eyebrowse-prev-window-config)
        ("n" eyebrowse-next-window-config)
        ("d" eyebrowse-close-window-config :exit t)
        ("r" eyebrowse-rename-window-config :exit t)
        ("." eyebrowse-switch-to-window-config :exit t)
        ("0" eyebrowse-switch-to-window-config-0 :exit t)
        ("1" eyebrowse-switch-to-window-config-1 :exit t)
        ("2" eyebrowse-switch-to-window-config-2 :exit t)
        ("3" eyebrowse-switch-to-window-config-3 :exit t)
        ("4" eyebrowse-switch-to-window-config-4 :exit t)
        ("5" eyebrowse-switch-to-window-config-5 :exit t)
        ("6" eyebrowse-switch-to-window-config-6 :exit t)
        ("7" eyebrowse-switch-to-window-config-7 :exit t)
        ("8" eyebrowse-switch-to-window-config-8 :exit t)
        ("9" eyebrowse-switch-to-window-config-9 :exit t)
        ("<tab>" eyebrowse-last-window-config :exit t)
        ("l" eyebrowse-last-window-config :exit t)
        ("q" nil "quit")
        ("c" nil "cancel" :color grey20)
    )
    (evil-leader/set-key "l" 'hydra-workspace-menu/body )
  )
#+END_SRC

*** projectile
#+BEGIN_SRC emacs-lisp
(use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-mode)
    (evil-leader/set-key
        "p" 'projectile-command-map
    )
)
#+END_SRC
~M-x projectile-invalidate-cache~ to clear project cache
*** winum
#+BEGIN_SRC emacs-lisp
(use-package winum
:config
(winum-mode)
  (evil-leader/set-key
    "0" 'winum-select-window-0-or-10
    "1" 'winum-select-window-1
    "2" 'winum-select-window-2
    "3" 'winum-select-window-3
    "4" 'winum-select-window-4
    "5" 'winum-select-window-5
    "6" 'winum-select-window-6
  )
)
#+END_SRC

*** helm-ag
#+BEGIN_SRC emacs-lisp
(use-package helm-ag
:config
(setq
    helm-follow-mode-persistent t)
(evil-leader/set-key
  "ga" 'helm-ag
)
)
#+END_SRC

*** ace-jump
#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
:config
(evil-leader/set-key
"gg" 'ace-jump-mode
; "<SPC>" 'ace-jump-mode
; "<SPC>" 'ace-jump-char-mode
)
)
#+END_SRC

*** ensime
#+BEGIN_SRC emacs-lisp
(use-package ensime
  ; :pin melpa ;; pining to melpa uses cutting-edge snapshot version
  :commands ensime ensime-mode
  :init
  :config
  (require 'ensime-expand-region)
  (setq ensime-startup-notification nil
  ensime-startup-snapshot-notification nil))
#+END_SRC

*** commentary
#+begin_src emacs-lisp
(use-package evil-commentary
:config
(evil-commentary-mode)
)
#+end_src

*** Yasnippet
http://joaotavora.github.io/yasnippet/
#+BEGIN_SRC emacs-lisp
(use-package yasnippet
  :diminish yas-global-mode yas-minor-mode
  :custom
  (yas-snippet-dirs (list (concat emacs-d-root "/yasnippet-snippets/snippets/")
                          (concat config-base-dir "/emacs/dopace/snippets/")))
  :config
  ;(setq yas-snippet-dirs '("d:/Program/emacs-26.2/.emacs.d/yasnippet-snippets/snippets/"
  ;                         "e:/nutstore/2017pc/emacs/dopace/snippets/"
  ;                         ))
  (yas-global-mode 1) ;;要放在最后，否则要M-x yas-relad-all
  (evil-leader/set-key 
    "ii" 'yas-insert-snippet
  )
)
#+END_SRC

*** hungry-delete
#+BEGIN_SRC emacs-lisp
(use-package hungry-delete
:ensure t
:config
(global-hungry-delete-mode)
)
#+END_SRC

*** company
#+BEGIN_SRC emacs-lisp
(use-package company
:ensure t
:config
(add-hook 'after-init-hook 'global-company-mode)
(add-hook 'company-mode-hook 
  (lambda ()
    (setq company-idle-delay 0)
   ;(define-key evil-insert-state-map (kbd "<tab>") 'company-indent-or-complete-common)
   ;(define-key company-active-map (kbd "C-j") 'company-select-next)
   ;(define-key company-active-map (kbd "C-d") 'company-select-previous)
))
)
#+END_SRC

**** Usage
- <Tab> complete common part
- <return> select candidate and done
- M-n select-next 
- M-p select-previous
- C-n select nearest candidate before and done
- C-p select nearest candidate after and done
=M-x Customize-variable RET company-backends= to see or change the backends list 
=M-x describe-function RET company-mode= for more information

*** youdao-dictionary
#+BEGIN_SRC emacs-lisp
(use-package youdao-dictionary
    :ensure t
    :config 
    (setq url-automatic-caching t)
    (evil-leader/set-key 
    "yd"  'youdao-dictionary-search-at-point+
    )
) 
#+END_SRC

*** hydras
https://github.com/jerrypnz/major-mode-hydra.el
一个类似于which-key快捷键提示, 以及自定义快捷键
是可以自定义模式，触发唤出来一组模式出来
#+BEGIN_SRC emacs-lisp
(use-package hydra
  :config
  (defhydra dopace/hydra-zoom (:color pink)
    "zoom"
    ("q" nil "cancel")
    ("i" text-scale-increase "in")
    ("o" text-scale-decrease "out"))
  (bind-key "C-c h z" 'dopace/hydra-zoom/body)
  (evil-leader/set-key "z"  'dopace/hydra-zoom/body)
)
#+END_SRC

*** org-download
This extension facilitates moving images from outside to emacs
#+BEGIN_SRC emacs-lisp
(use-package org-download
  :ensure t
  :disabled t
  :config
  (add-hook 'dired-mode-hook 'org-download-enable)
)
#+END_SRC

*** electric-pair-mode
=M-x sexp=
#+BEGIN_SRC emacs-lisp
(use-package electric
  :ensure nil
  :config
  (electric-pair-mode 1)
  (setq electric-pair-inhibit-predicate 'electric-pair-conservative-inhibit)
  (show-paren-mode t)
  (define-key electric-pair-mode-map (kbd "M-[") 'backward-sexp)
  (define-key electric-pair-mode-map (kbd "M-]") 'forward-sexp)
)
#+END_SRC

**** Usage
| function           | keybindings | newbinding | description                                         |
|--------------------+-------------+------------+-----------------------------------------------------|
| backward-sexp      | C-M-b       | M-[        | move to the (beginning of) previous sexp unit       |
| forward-sexp       | C-M-f       | M-]        | move to the (end of) next sexp unit                 |
| kill-sexp          | C-M-k       |            | kill-sexp                                           |
| backward-kill-sexp | C-Backspce  |            | Backward-kill-sexp                                  |
| backward-up-list   | C-M-u       |            | move to the (beginning of) outer paren pair         |
| down-list          | C-M-d       |            | move into the (beginning of) first inner paren pair |
| raise-sexp         |             |            |                                                     |
| indent-pp-sexp     |             |            |                                                     |
| mark-sexp          |             |            |                                                     |

**** test
#+BEGIN_SRC elisp
(add-hook 'python-mode-hook
          (lambda ()
            (expression 1)
            (expression 2)
            (expression 3)
            ))
#+END_SRC

*** evil-surround
https://github.com/emacs-evil/evil-surround
#+BEGIN_SRC emacs-lisp
(use-package evil-surround
  :ensure t
  :config
  (global-evil-surround-mode 1)
  (add-hook 'c++-mode-hook (lambda ()
                           (push '(?c . ("/*" . "*/")) evil-surround-pairs-alist)))
  (setq-default evil-surround-pairs-alist
    (progn
      (push '(?\( . ("(" . ")")) evil-surround-pairs-alist)
      (push '(?\[ . ("[" . "]")) evil-surround-pairs-alist)
      (push '(?\{ . ("{" . "}")) evil-surround-pairs-alist)))
)
#+END_SRC

**** Usage
| Vi-state     | press   | before              | after                 |
|--------------+---------+---------------------+-----------------------|
| visal-state  | Sfprint | "Hello world"       | print("Hello world")  |
| visal-state  | Sfprint | "Hello world"       | print("Hello world")  |
| normal-state | cs"'    | "Hello world"       | 'Hello world'         |
|              | cs'<q>  | 'Hello world'       | <q>Hello world</q>    |
|              | cst"    | <q>Hello world</q>  | "Hello world"         |
|              | ds"     | "Hello world"       | Hello world           |
|              | ys2w]   | Hello java script   | [Hello java] script   |
|              | yss}    | [Hello java] script | {[Hello java] script} |

*** magit
magit-status
magit-blame-addition 
#+BEGIN_SRC emacs-lisp
(use-package magit
  :ensure t 
  :hook
  (magit-mode . hl-line-mode)
  :custom
  (magit-auto-revert-mode nil)
  (magit-log-arguments '("-n100" "--graph" "--decorate"))
  :config
  (magit-define-popup-switch 'magit-log-popup
    ?m "Omit merge commits" "--no-merges")
)
#+END_SRC

*** blog-admin
#+BEGIN_SRC emacs-lisp
(use-package blog-admin
:disabled t
:init
(progn
  ;; your config
  (setq blog-admin-backend-type 'hexo)
  (setq blog-admin-backend-path (concat config-base-dir "/jijing.site/"))
  (setq blog-admin-backend-new-post-in-drafts t)
  (setq blog-admin-backend-new-post-with-same-name-dir t)
  ))
#+END_SRC

*** ox-reveal
一款非常强大漂亮的HTML幻灯片插件
#+BEGIN_SRC emacs-lisp
  (use-package ox-reveal
    :ensure t 
    :config 
    (setq org-reveal-root "file:///d:/Program/reveal.js")
    ;(setq org-reveal-root "https://cdn.jsdelivr.net/npm/reveal.js@3.8.0")
  )
#+END_SRC

**** usage 
初次使用加载方法：
type “M-x load-library”, then type “ox-reveal”.
Now you can export this manual into Reveal.js presentation by typing “C-c C-e R R”.

官方示例： https://revealjs.com/#/
reveal.js可以支持演讲者双屏note模式(浏览器按“s”键唤出)，大屏幻灯片，小屏预览笔记模式

**** config
#+BEGIN_EXAMPLE
#+OPTIONS: reveal_single_file:t        ;生成到单个HTML文件
#+OPTIONS: toc:nil                     ;关闭索引
#+REVEAL_THEME: league                 ;black|white|league|sky|beige|simple|serif|blood|night|moon|solarized
#+REVEAL_DEFAULT_FRAG_STYLE: roll-in   ;默认FRAG动画roll-in
#+REVEAL_TRANS: none                   ;default|cube|page|concave|zoom|linear|fade|none
#+REVEAL_PLUGINS: (highlight notes)    ;语法高亮，演讲者模式插件
#+END_EXAMPLE

config per slide
#+BEGIN_EXAMPLE
\*** title1 
    :PROPERTIES:
    :reveal_background: ./images/whale.jpg
    :reveal_background_trans: slide
    :END:
\*** title2
    #+REVEAL_DEFAULT_FRAG_STYLE grow|shink|roll-in|fade-out|appear|highlight-red|
#+END_EXAMPLE

*** htmize
for org-mode export HTML 
#+BEGIN_SRC emacs-lisp
(use-package htmlize)
#+END_SRC

* KeyBindings
** Inctroductions(Not config)
*** global key maps
~(global-set-key (kbd "C-c b") 'bbdb)~
*** specfic mode keymap
~(define-key text-mode-map (kbd "'") 'maybe-open-apostrophe)~
~M-x describe-mode~ to show all modes in current buffer
#+begin_src
(local-set-key (kbd "C-c q") (lambda () (interactive) (message "Hi Local Hook")))
(defun localhooktest ()
  (local-set-key (kbd "C-c q") (lambda () (interactive) (message "Hi Local Hook"))))
(add-hook 'org-mode-hook 'localhooktest)
#+end_src

*** binding after load
~(eval-after-load 'text-mode '(define-key text-mode-map (kbd "'") 'maybe-open-apostrophe))~
*** remove keybindings
~(global-unset-key (kbd "C-c b")~
*** prefix-key
#+begin_example
(define-prefix-command 'ctl-z-map)
(global-set-key (kbd "C-z") 'ctl-z-map)
(global-set-key (kbd "C-z C-c C-w b") 'find-file)
#+end_example

** layouts
** windows
#+BEGIN_SRC emacs-lisp
(defun split-window-below-and-focus ()
  "Split the window vertically and focus the new window."
  (interactive)
  (split-window-below)
  (windmove-down)
  (when (and (boundp 'golden-ratio-mode)
             (symbol-value golden-ratio-mode))
    (golden-ratio)))

(defun split-window-right-and-focus ()
  "Split the window horizontally and focus the new window."
  (interactive)
  (split-window-right)
  (windmove-right)
  (when (and (boundp 'golden-ratio-mode)
             (symbol-value golden-ratio-mode))
    (golden-ratio)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
(defhydra hydra-window (:idle 1.0 ;delay 1.0s
                        :exit t 
                        :hint nil)
  "
  窗口跳转      ^^                    ^^                窗口移动
  ^^^^──────  ^^────────────────  ^^───────────────   ^^^^──────
    _k_^^     _/_ new-right-window   _s_ split-right         _K_^^
  _h_   _l_   _-_ new-down-window    _v_ split-bottom      _H_   _L_
    _j_^^     _d_ delete-window      _=_ balance-windows     _J_^^
    
  "
  ("=" balance-windows )
  ("l" evil-window-right ) 
  ("h" evil-window-left )
  ("k" evil-window-up )
  ("j" evil-window-down )
  ("L" evil-window-move-far-right )
  ("H" evil-window-move-far-left )
  ("K" evil-window-move-very-top )
  ("J" evil-window-move-very-bottom )
  ("-" split-window-below-and-focus)
  ("/" split-window-right-and-focus)
  ("v" split-window-below)
  ("s" split-window-right)
  ("o" other-window)
  ("d" delete-window)
  ("m" delete-other-windows)
  ("c" centered-buffer-mode)
  ("b" switch-to-minibuffer-window)
  ("q" nil "quit")
)
(evil-leader/set-key "w" 'hydra-window/body)
#+END_SRC

** buffer
*** Keybidings
#+BEGIN_SRC emacs-lisp
(evil-leader/set-key
"bb" 'ivy-switch-buffer
"bh" 'home
"bn" 'next-buffer
"bp" 'previous-buffer
"bm" 'kill-other-buffer
"bd" 'kill-this-buffer
;"b." 'buffer-transient-state
)
#+END_SRC

*** Switch buffer toggle
快速切换上一个buffer，摘自spacemacs
#+begin_src emacs-lisp
(defun spacemacs/alternate-buffer (&optional window)
  "Switch back and forth between current and last buffer in the
current window."
  (interactive)
  (let ((current-buffer (window-buffer window))
        (buffer-predicate
         (frame-parameter (window-frame window) 'buffer-predicate)))
    ;; switch to first buffer previously shown in this window that matches
    ;; frame-parameter `buffer-predicate'
    (switch-to-buffer
     (or (cl-find-if (lambda (buffer)
                       (and (not (eq buffer current-buffer))
                            (or (null buffer-predicate)
                                (funcall buffer-predicate buffer))))
                     (mapcar #'car (window-prev-buffers window)))
         ;; `other-buffer' honors `buffer-predicate' so no need to filter
         (other-buffer current-buffer t)))))

(evil-leader/set-key "<tab>" #'spacemacs/alternate-buffer )
#+end_src

** project
** application
#+BEGIN_SRC emacs-lisp
(evil-leader/set-key
"aa" 'org-agenda
)
#+END_SRC

** +file

#+BEGIN_SRC emacs-lisp
(evil-leader/set-key
"fc" 'copy-file
"fh" 'hexl-find-file
"fs" 'save-buffer
)
(evil-leader/set-key
"ma" 'bookmark-set
"mj" 'bookmark-jump
"md" 'bookmark-delete
"ml" 'bookmark-bmenu-list
)
#+END_SRC

** toggle
#+BEGIN_SRC emacs-lisp
(evil-leader/set-key
    "tl" 'linum-mode
    "tp" 'org-toggle-inline-images
    "tm" 'toggle-menu-bar-mode-from-frame
)
#+END_SRC

* Program-Language
** Python
** Scala
#+BEGIN_SRC emacs-lisp
(add-hook 'scala-mode-hook
          (lambda ()
            (show-paren-mode)
            (yas-minor-mode)
            (company-mode)
            (ensime-mode)
            (define-key ensime-mode-map (kbd "<tab>") 'yas-expand)
            (scala-mode:goto-start-of-code))
)
#+END_SRC

** Lisp
** Verilog
#+BEGIN_SRC emacs-lisp
(defun dopace/setup-verilog ()
    (custom-set-variables
    '(verilog-auto-inst-column 40)
    '(verilog-auto-lineup (quote all))
    '(verilog-indent-level-declaration 0)
    '(verilog-indent-level 2)
    '(verilog-indent-level-module 0))
    )
(add-hook 'verilog-mode-hook #'dopace/setup-verilog)
#+END_SRC

** C
* Org-mode
** setup
=M-x customize-group RET org-appearance RET=
=M-x customize-group RET org-faces RET=
~monospace~
*Bold*
/italic/
+strike-through+
_underlined_
E=mc^2
#+BEGIN_SRC emacs-lisp
(use-package org
  :mode ("\\.org\\'" . org-mode)
  :bind
  (("C-c l" . org-store-link)
  ("C-c a" . org-agenda)
  ("C-c b" . org-iswitchb)
  ("C-c c" . org-capture))
  :bind
  (:map org-mode-map
  ("M-n" . outline-next-visible-heading)
  ("M-p" . outline-previous-visible-heading))
  :custom
  (org-src-window-setup 'current-window)
  (org-return-follows-link t)
  (org-babel-load-languages
  '((emacs-lisp . t)
      (python . t)))
  (org-use-speed-commands t)
  (org-catch-invisible-edits 'show)
  :custom-face
  (org-default ((t (:inherit default :background "snow"))))  
  (variable-pitch ((t (:family "iA Writer Duospace" :height 0.9))))
  (org-document-title ((t (:foreground "black" :slant italic :weight bold :height 1.3))))
  (org-meta-line ((t (:inherit font-lock-comment-face :foreground "chocolate3" :slant italic :height 0.94))))
  (org-date ((t (:foreground "chocolate3" :underline t :slant italic :height 0.94)))) ;DATA
  (org-document-info-keyword ((t (:inherit shadow :foreground "snow4" :slant italic :height 0.94))))
  (org-document-info ((t (:foreground "midnight blue" :slant italic))))
  (org-level-1 ((t (:foreground "blue"))))
  (org-level-2 ((t (:foreground "SaddleBrown"))))
  (org-level-3 ((t (:foreground "purple"))))
  (org-block-begin-line ((t (:foreground "#999" :background "linen" :slant italic :underline t)))) ;fff4ea
  (org-block-end-line ((t (:foreground "#999" :background "linen" :slant italic :underline t))))   ;fff4ea
  (org-block ((t (:background "ivory")))) ;fffef5 fffffa
  (org-quote ((t (:background "ivory"))))
  (org-checkbox ((t (:inherit org-todo :foreground "black" :weight bold))))
  (org-checkbox-statistics-done ((t (:foreground "green4"))))
  (org-checkbox-statistics-todo ((t (:inherit org-todo :foreground "firebrick1" :weight bold))))
  (org-special-keyword ((t (:foreground "chocolate3" :slant italic :height 0.94)))) ;DEDLINE SCHEDUE
  (org-image-actual-width (/ (display-pixel-width) 2))
  ;; :custom
  ;; (org-structure-template-alist '(("a" . "export ascii")
  ;;                                 ("c" . "center")
  ;;                                 ("C" . "comment")
  ;;                                 ("e" . "example")
  ;;                                 ("E" . "export")
  ;;                                 ("h" . "export html")
  ;;                                 ("l" . "export latex")
  ;;                                 ("q" . "quote")
  ;;                                 ("s" . "src")
  ;;                                 ("v" . "verse")
  ;;                                 ("el" . "src emacs-lisp")
  ;;                                 ("d" . "definition")
  ;;                                 ("t" . "theorem")))
  :config
  (setq system-time-locale "C")       ;set date english format
  (setq org-startup-indented t)
  (setq org-latex-compiler "xelatex")
  (require 'org-habit)
  (when (version<= "9.2" (org-version))
  (require 'org-tempo))

  (setq org-latex-pdf-process '("xelatex -interaction nonstopmode %f"
                          "xelatex -interaction nonstopmode %f"))
  (setq org-latex-default-packages-alist
  (remove '("AUTO" "inputenc" t) org-latex-default-packages-alist))
  )
#+END_SRC

:PROPERTIES:
:reveal_background: ./images/whale.jpg
:reveal_background_size: 200px
:reveal_background_repeat: repeat
:END:

#+BEGIN_SRC elisp
(mode-line italic mode-line)
;; First create new face which is a copy of hl-line-face
(copy-face 'hl-line 'hl-line-agenda-face)

;; Change what you want in this new face 
(set-face-attribute 'hl-line-agenda-face nil
                    :box '(:color "deep pink" :line-width 2))

;; The function to use the new face
(defun my-org-agenda-hl-line ()
  (set (make-local-variable 'hl-line-face) ; This is how to make it local
       'hl-line-agenda-face)
    (hl-line-mode))

;; Finally, the hook
(add-hook 'org-agenda-mode-hook 'my-org-agenda-hl-line)
#+END_SRC

** Org-GTD     
** Org-Blog
** Org-export
** Exporting PDFs

如果使用xelatex，需要将一下头添加到org文件头
#+begin_example
#+LATEX_HEADER: \usepackage{xeCJK}
#+LATEX_HEADER: \setCJKmainfont{SimSun}
#+end_example

如果使用pdflatex，修改为
#+begin_example
#+LATEX_HEADER: \usepackage[UTF8]{ctex}
#+LATEX_HEADER: \setCJKmainfont{SimSun}
#+end_example

xelatex比较新,对UTF的支持更傻瓜，但是对有些旧的宏可能不支持。
而pdflatex对宏的支持更全面，排版个人觉得更为好看，只不过体积有点大

I use export to LaTeX through ox-latex, using xelatex for a nicer export template.
#+begin_src emacs-lisp
(use-package ox-latex
    :disabled t
    :after org
    :ensure nil
    :config
    :custom
    (org-latex-pdf-process
     (list "latexmk -shell-escape -bibtex -f -pdf %f"
           "latexmk -shell-escape -bibtex -f -pdf %f"))
    (org-latex-default-table-environment "tabular")
    (org-latex-tables-booktabs t)
    (org-latex-listings 'minted)
    ;(org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
    (org-latex-classes
     '(("article"
        "\\documentclass{article}
  \\usepackage[margin=1in]{geometry}
  \\usepackage{amsmath,amsthm,amssymb}
  \\newtheorem{definition}{Definition}
  \\newtheorem{theorem}{Theorem}

  \\usepackage{booktabs}
  \\usepackage{hyperref}
  \\usepackage{minted}
  \\usepackage{tabularx}
  \\usepackage{parskip}
  \\linespread{1.1}"
       ("\\section{%s}" . "\\section*{%s}")
       ("\\subsection{%s}" . "\\subsection*{%s}")
       ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
       ("\\paragraph{%s}" . "\\paragraph*{%s}")
       ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
       ("book"
        "\\documentclass[10pt]{memoir}
         \\usepackage{charter}
         \\usepackage[T1]{fontenc}
         \\usepackage{booktabs}
         \\usepackage{amsmath}
         \\usepackage{minted}
         \\usemintedstyle{borland}
         \\usepackage{color}
         \\usepackage{epigraph}
         \\usepackage{enumitem}
         \\setlist{nosep}
         \\setlength\\epigraphwidth{13cm}
         \\setlength\\epigraphrule{0pt}
         \\usepackage{fontspec}
         \\usepackage{graphicx}
         \\usepackage{hyperref}
         \\hypersetup {colorlinks = true, allcolors = red}
         \\title{}
         [NO-DEFAULT-PACKAGES]
         [NO-PACKAGES]"
        ("\\chapter{%s}" . "\\chapter*{%s}")
        ("\\section{%s}" . "\\section*{%s}")
        ("\\subsection{%s}" . "\\subsection*{%s}")
        ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
        ("\\paragraph{%s}" . "\\paragraph*{%s}")
        ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
       ("latex-notes"
        "\\documentclass[8pt]{article}
    \\usepackage[margin={0.1in,0.1in}, a4paper,landscape]{geometry}
    \\usepackage{hyperref}
    \\usepackage{amsmath}
    \\usepackage{multicol}
    \\usepackage{booktabs}
    \\usepackage{enumitem}
    \\usepackage[compact]{titlesec}
    \\renewcommand\\maketitle{}
    \\titlespacing{\\section}{0pt}{*2}{*0}
    \\titlespacing{\\subsection}{0pt}{*2}{*0}
    \\titlespacing{\\subsubsection}{0pt}{*2}{*0}
    \\titleformat*{\\section}{\\large\\bfseries}
    \\titleformat*{\\subsection}{\\normalsize\\bfseries}
    \\titleformat*{\\subsubsection}{\\normalsize\\bfseries}
    \\setlist[itemize]{leftmargin=*}
    \\setlist[enumerate]{leftmargin=*}
    \\setlength\\columnsep{5pt}
    \\setlength{\\columnseprule}{1pt}
    \\setlength{\\parindent}{0cm}
    \\usepackage{setspace}
    \\singlespacing
    \\setlist{nosep}
    \\usepackage{minted}
    \\usemintedstyle{bw}
    \\usemintedstyle[java]{bw}
    \\setminted[]{frame=none,fontsize=\\footnotesize,linenos=false}
    "
        ("\\section{%s}" . "\\section*{%s}")
        ("\\subsection{%s}" . "\\subsection*{%s}")
        ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
        ("\\paragraph{%s}" . "\\paragraph*{%s}")
        ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
    :config
    (defvar-local jethro/org-multicol-latex-column-count
      3
      "Column count for multicolumn export.")

    (defun jethro/org-multicol-to-pdf (async subtreep visible-only body-only)
      (let ((contents (buffer-string))
            (buffer-name (file-name-sans-extension buffer-file-name))
            (col-count jethro/org-multicol-latex-column-count))
        (with-temp-buffer
          (insert "#+LATEX_CLASS: latex-notes\n")
          (insert contents)
          (goto-char (point-min))
          (org-next-visible-heading 1)
          (insert
           (format "#+BEGIN_EXPORT latex\n\\begin{multicols*}{%s}\n#+END_EXPORT\n" col-count))
          (goto-char (point-max))
          (insert "#+BEGIN_EXPORT latex\n\\end{multicols*}\n#+END_EXPORT")
          (org-export-to-file 'latex (format "%s.tex" buffer-name)
            async subtreep visible-only body-only nil (lambda (file) (org-latex-compile file))))))

    (org-export-define-derived-backend 'latex-notes 'latex
      :menu-entry
      '(?L "Export to LaTeX notes"
           ((?p "Export to PDF" jethro/org-multicol-to-pdf)))))
#+end_src

** Org-formula-preview
According to the [[https://orgmode.org/manual/Previewing-LaTeX-fragments.html#Previewing-LaTeX-fragments][documentation]]
or =(info "(org) Previewing LaTeX fragments")=
A quick ~C-h org-format-latex-options RET~ to show export format Infor 
#+begin_src emacs-lisp
(setq org-latex-compiler "xelatex")
(if (string-equal system-type "darwin")      
  (setq org-format-latex-options (plist-put org-format-latex-options :scale 1.3))
  )
(setq org-latex-create-formula-image-program 'dvipng)

(if (memq system-type '(windows-nt cygwin ms-dos))
  (setq 
    temporary-file-directory "e:/.emacs_temp" ;;解决latex 不能识别 C:/ADMIN~1/路径的问题
    org-format-latex-options (plist-put org-format-latex-options :scale 1.6))
)
#+end_src

[[https://blog.csdn.net/winterTTr/article/details/7273283][emacs调用外部命令的环境设置]]

(load "auctex.el" nil t t)
(load "preview.el" nil t t)
M-x customize-variable RET preview-image-type RET
*** FAQ
- Macos下能正常preview，但是windows下依然报错"c:/Users/ADMINI~1/AppData/Local/Temp/orgtexGzYR6k.dvi" wasn't produced
  https://orgmode.org/worg/org-tutorials/org-latex-preview.html
  latex   xxx.tex  -->  xxx.dvi
  dvipng  xxx.dvi  -->  xxx.png
  确保以下命令都能被找到
  (executable-find "dvipng")
  (executable-find "xelatex")
  (executable-find "dvisvgm")
  (executable-find "convert")
  配置都没有问题
  C-x b 打开 **\*Org Preview LaTex Output\*** 
  #+BEGIN_SRC 
  ! I can't find file `c:/Users/ADMINI'.
  <to be read again> 
    \protect 
  <*> c:/Users/ADMINI~
    1/AppData/Local/Temp/orgtexGzYR6k.tex
  #+END_SRC
  发现路径在ADMINI~1处break了，怀疑是latex不能正确识别路径中包含"~"字符
  在cmd或shell命令行中执行
  latex c:/Users/ADMINI~1/AppData/Local/Temp/orgtex26eeuz.dvi 
  果然失败
  解决方法：
  将临时路径重置，比如(setq temporary-file-directory "e:/.emacs_temp")

** Auctex
#+begin_src emacs-lisp
(use-package auctex
  :defer t
  :mode ("\\.tex\\'" . latex-mode)
  :custom
  (TeX-auto-save t)
  (TeX-parse-self t)
  (TeX-syntactic-comment t)
  ;; Synctex Support
  (TeX-source-correlate-start-server nil)
  ;; Don't insert line-break at inline math
  (LaTeX-fill-break-at-separators nil)
  (TeX-view-program-list '(("zathura" "zathura --page=%(outpage) %o")))
  (TeX-view-program-selection '((output-pdf "zathura")))
  :config
  (add-hook 'LaTeX-mode-hook
            (lambda ()
              (company-mode)
              (setq TeX-PDF-mode t)
              (setq TeX-source-correlate-method 'synctex)
              (setq TeX-source-correlate-start-server t)))
  (add-hook 'LaTeX-mode-hook 'LaTeX-math-mode)
  (add-hook 'LaTeX-mode-hook 'TeX-source-correlate-mode)
  (add-hook 'LaTeX-mode-hook 'TeX-PDF-mode))
#+end_src
AUCTEX is an extensible package for writing and formatting TEX files in GNU Emacs. It supports many different TEX macro packages, including AMS-TEX, LATEX, Texinfo, ConTEXt, and docTEX (dtx files).
可以用来预览org-mode中的latex公式（M-x org-toggle-latex-fragment)

** Automatic latex toggle

Automatic latex image toggling when cursor is on a fragment

#+begin_src emacs-lisp-bak
(defvar org-latex-fragment-last nil
  "Holds last fragment/environment you were on.")

(defun org-latex-fragment-toggle ()
  "Toggle a latex fragment image "
  (and (eq 'org-mode major-mode)
       (let* ((el (org-element-context))
              (el-type (car el)))
         (cond
          ;; were on a fragment and now on a new fragment
          ((and
            ;; fragment we were on
            org-latex-fragment-last
            ;; and are on a fragment now
            (or
             (eq 'latex-fragment el-type)
             (eq 'latex-environment el-type))
            ;; but not on the last one this is a little tricky. as you edit the
            ;; fragment, it is not equal to the last one. We use the begin
            ;; property which is less likely to change for the comparison.
            (not (= (org-element-property :begin el)
                    (org-element-property :begin org-latex-fragment-last))))
           ;; go back to last one and put image back
           (save-excursion
             (goto-char (org-element-property :begin org-latex-fragment-last))
             (org-preview-latex-fragment))
           ;; now remove current image
           (goto-char (org-element-property :begin el))
           (let ((ov (loop for ov in org-latex-fragment-image-overlays
                           if
                           (and
                            (<= (overlay-start ov) (point))
                            (>= (overlay-end ov) (point)))
                           return ov)))
             (when ov
               (delete-overlay ov)))
           ;; and save new fragment
           (setq org-latex-fragment-last el))

          ;; were on a fragment and now are not on a fragment
          ((and
            ;; not on a fragment now
            (not (or
                  (eq 'latex-fragment el-type)
                  (eq 'latex-environment el-type)))
            ;; but we were on one
            org-latex-fragment-last)
           ;; put image back on
           (save-excursion
             (goto-char (org-element-property :begin org-latex-fragment-last))
             (org-preview-latex-fragment))
           ;; unset last fragment
           (setq org-latex-fragment-last nil))

          ;; were not on a fragment, and now are
          ((and
            ;; we were not one one
            (not org-latex-fragment-last)
            ;; but now we are
            (or
             (eq 'latex-fragment el-type)
             (eq 'latex-environment el-type)))
           (goto-char (org-element-property :begin el))
           ;; remove image
           (let ((ov (loop for ov in org-latex-fragment-image-overlays
                           if
                           (and
                            (<= (overlay-start ov) (point))
                            (>= (overlay-end ov) (point)))
                           return ov)))
             (when ov
               (delete-overlay ov)))
           (setq org-latex-fragment-last el))))))


(add-hook 'post-command-hook 'org-latex-fragment-toggle)

#+end_src

** Tutorial

Org-mode的一些使用方法和配置收集整理，仅当参考手册，并无生效的配置

*** links
Org支持多种格式的超链接，对于符合链接规则的内容，会自动视其为链接，暴扣文件，网页，邮箱，
新闻组，BBDB数据库，IRC会话和记录等等，一下例子都是有效的链接形式
http://www.google.com
file:~/.zshrc
file:/Users/jijing/.alias
file:~/.alias
docview:dopace.pdf::12
mailto:goco.v@163.com
mhe:folder#id
rmail:folder#id              
bbdb:R.*Stallman
irc:/irc.com/#emacs/bob     
irc://irc.freenode.net/scala
info:org:External%20links  
其中docview pdf需要保证Ghostscript和xpdf正确安装✔

对于文件链接，可以用::增加定位符的方式链接到指定位置，也可以是行号或者搜索选项
file:~/code/main.c:122
file:./dopace.org::Org-mod
file:./dopace.org::#my-custom-id

当然也可以用传统的显示的指定超链接,格式如下
#+BEGIN_EXAMPLE
[link][description]]
[[link]]
#+END_EXAMPLE

前面的例子都是外部链接，Org-mode还支持内部链接：
#+BEGIN_EXAMPLE
定义锚点 #<<my-anchor>>
[[my-anchor][内部链接]]
#+END_EXAMPLE

脚注可以看作是一种特殊的内部链接，但是要求具有"fn:"前缀：
#+BEGIN_EXAMPLE
添加脚注链接 [[fn:footprint1][脚注1]]
定义脚注 [fn:footprint1]
#+END_EXAMPLE

*** list 
Org 能够识别有序列表、无序列表和描述列表。
1. 无序列表项以‘-’、‘+’或者‘*‘开头。
2. 有序列表项以‘1.’或者‘1)’开头。
3. 描述列表用‘::’将项和描述分开。
4. 统一列表缩进相同，添加子列表时，需在列表投添加tab缩进
   - 子列表更进一步缩进
     1) 3级列表
     2) 3级列表
   - 子列表M-Enter增加同级列表
有序列表和无序列表都以缩进表示层级。只要对齐缩进，不管是换行还是分块都认为是处于当前列表项。

*** Meta-Info
主要的Meta元, 一般建议放在文件头
#+BEGIN_EXAMPLE
#+TITLE:       the title to be shown (default is the buffer name)
#+AUTHOR:      the author (default taken from user-full-name)
#+DATE:        a date, an Org timestamp1, or a format string for format-time-string
#+EMAIL:       his/her email address (default from user-mail-address)
#+DESCRIPTION: the page description, e.g. for the XHTML meta tag
#+KEYWORDS:    the page keywords, e.g. for the XHTML meta tag
#+LANGUAGE:    language for HTML, e.g. ‘en’ (org-export-default-language)
#+TEXT:        Some descriptive text to be inserted at the beginning.
#+TEXT:        Several lines may be given.
#+OPTIONS:     H:2 num:t toc:t \n:nil @:t ::t |:t ^:t f:t TeX:t ...
#+BIND:        lisp-var lisp-val, e.g.: org-export-latex-low-levels itemize
               You need to confirm using these, or configure org-export-allow-BIND
#+LINK_UP:     the ``up'' link of an exported page
#+LINK_HOME:   the ``home'' link of an exported page
#+LATEX_HEADER: extra line(s) for the LaTeX header, like \usepackage{xyz}
#+EXPORT_SELECT_TAGS:   Tags that select a tree for export
#+EXPORT_EXCLUDE_TAGS:  Tags that exclude a tree from export
#+XSLT:        the XSLT stylesheet used by DocBook exporter to generate FO file
#+END_EXAMPLE

其中#+OPTIONS是复合的选项
#+BEGIN_EXAMPLE
H:         set the number of headline levels for export
num:       turn on/off section-numbers
toc:       turn on/off table of contents, or set level limit (integer)
\n:        turn on/off line-break-preservation (DOES NOT WORK)
@:         turn on/off quoted HTML tags
::         turn on/off fixed-width sections
|:         turn on/off tables
^:         turn on/off TeX-like syntax for sub- and superscripts.  If
           you write "^:{}", a_{b} will be interpreted, but
           the simple a_b will be left as it is.
-:         turn on/off conversion of special strings.
f:         turn on/off footnotes like this[1].
todo:      turn on/off inclusion of TODO keywords into exported text
tasks:     turn on/off inclusion of tasks (TODO items), can be nil to remove
           all tasks, todo to remove DONE tasks, or list of kwds to keep
pri:       turn on/off priority cookies
tags:      turn on/off inclusion of tags, may also be not-in-toc
<:         turn on/off inclusion of any time/date stamps like DEADLINES
*:         turn on/off emphasized text (bold, italic, underlined)
TeX:       turn on/off simple TeX macros in plain text
LaTeX:     configure export of LaTeX fragments.  Default auto
skip:      turn on/off skipping the text before the first heading
author:    turn on/off inclusion of author name/email into exported file
email:     turn on/off inclusion of author email into exported file
creator:   turn on/off inclusion of creator info into exported file
timestamp: turn on/off inclusion creation time into exported file
d:         turn on/off inclusion of drawers
#+END_EXAMPLE

*** block
- <s source 代码
- <e exampe 例子
- <v verse  默认内容不换行，实现普通换行
- <q quote  引用，与默认格式相比，左右都会留出缩进
- <c center 居中区块
- <l latex
- <h HTML   嵌入html
  相当于在发布的html中插入"c++"代码
  #+BEGIN_SRC html
    #+BEGIN_HTML
    <div class="cnblogs_Highlighter">
    <pre class="brush:cpp">
    int main()
    {
        return 0;
    }
    </pre>
    </div>
    #+END_HTML
  #+END_SRC
- #+begin_comment
- #+caption:This is the caption for the next table (or link)
- #LABLE: tbl:table1
  可以在需要的地方 \ref{table1} 引用该表格
- #+INCLUDE: "~/.emacs" src emacs-lisp
  当导出文档时，你可以包含其他文件中的内容。比如，想包含你的“.emacs”文件，你可以用：
  可选的第二个第三个参数是组织方式（例如，“quote”，“example”，或者“src”），
  如果是 “src”，语言用来格式化内容。组织方式是可选的，如果不给出，
  文本会被当作 Org 模式的正常处理。用 C-c ,可以访问包含的文件。

*** html-export template
#+BEGIN_SRC elisp
(setq org-publish-project-alist
     '(("org"
        :base-directory "~/org/"
        :publishing-directory "~/public_html"
        :section-numbers nil
        :table-of-contents nil
        :style "<link rel=\"stylesheet\"
               href=\"../other/mystyle.css\"
               type=\"text/css\"/>")))
#+END_SRC
在文件头添加

*** pdf(latex)-export template
#+BEGIN_SRC elisp
(require 'ox-latex)
(unless (boundp 'org-latex-classes)
  (setq org-latex-classes nil))
(add-to-list 'org-latex-classes
             '("article"
               "\\documentclass{article}"
               ("\\section{%s}" . "\\section*{%s}")))
#+END_SRC

=#+LaTeX_CLASS: article0=
#+BEGIN_SRC elisp
(add-to-list 'org-latex-classes
             '("article0"
               "\\documentclass{article}"
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
               ("\\paragraph{%s}" . "\\paragraph*{%s}")
               ("\\subparagraph{%s}" . "\\subparagraph*{%s}")))
#+END_SRC

=#+LaTeX_CLASS: book0=
#+BEGIN_SRC elisp
(add-to-list 'org-latex-classes
             '("book0"
               "\\documentclass{book}"
               ("\\part{%s}" . "\\part*{%s}")
               ("\\chapter{%s}" . "\\chapter*{%s}")
               ("\\section{%s}" . "\\section*{%s}")
               ("\\subsection{%s}" . "\\subsection*{%s}")
               ("\\subsubsection{%s}" . "\\subsubsection*{%s}"))
             )
#+END_SRC

当然可以设置更多的格式，只需要在文件头通过 =#LaTex_CLASS: XXX= 来导入

*** FQA
- Please adjust ‘dvipng’ part of ‘org-preview-latex-process-alist
  org-compile-file: File "c:/Users/ADMINI~1/AppData/Local/Temp/orgtexIbqETP.dvi" wasn’t produced.  Please adjust ‘dvipng’ part of ‘org-preview-latex-process-alist’.
  将latex的默认编译器设置为 xelatex生效
  预览时遇到问题：
  =(setq org-latex-compiler "xelatex")=
- LaTeX Error: File `xyz.sty' not found.
  =sudo tlmgr install xyz.sty=
- BEGIN_QUOTE 被动生效
  在本文档突然出现pdf,latex预览不能正常工作，但在其他文档中能正常工作，怀疑文档中的Meta元配置有误
  在文件头已经添加了 =#+LATEX_HEADER: \usepackage[UTF8]{ctex}= 没有问题
  后检查文档 [[file:test.org::Meta-Info][Meta-Info]] 说明举例时将Meta元放在BEGIN_QUOTE中，QUOTE中的元是会生效，
  正确的做法是应该将 **实例的代码或者Mete元放在BEGIN_EXAMPLE以防止被动生效导致异常**

*** Reference
*参考资料*
- LaTex Export https://orgmode.org/worg/org-tutorials/org-latex-export.html
- Emacs org-mode https://www.cnblogs.com/holbrook/archive/2012/04/12/2444992.html

* Ui
** Basic-face
=customize-group doom-modeline=
=customize-group mode-lilne-faces=

#+BEGIN_SRC emacs-lisp
  (custom-set-faces
   '(fringe ((t (:inherit nil :background "white"))))
   '(mode-line          ((t (:inherit mode-line :background "#cdd8ee" :foreground "grey20" :weight light))))
   '(mode-line-inactive ((t (:inherit mode-line :background "grey95"  :foreground "grey50" :weight light))))
   '(font-lock-comment-face ((t (:foreground "grey60"))))
   '(font-lock-comment-face ((t (:foreground "LightSkyBlue4"))))
   '(vertical-border ((t (:foreground "gray70" ))))
   '(linum ((t (:background "#f5f5f5" :foreground "grey50"))))
  )

  ;; (add-hook 'org-mode-hook (lambda ()
  ;;   (custom-set-faces 
  ;;     '(font-lock-comment-face ((t (:foreground "green4"))))
  ;;   ))
  ;; )
#+END_SRC

** Custom-theme
#+BEGIN_SRC elisp
(custom-set-faces
 '(default ((t (:background "gray20" :foreground "ghost white"))))

 '(ac-candidate-face ((t (:background "gray15" :foreground "ghost white"))))
 '(ac-completion-face ((t (:background "olivedrab" :foreground "khaki"))))
 '(ac-selection-face ((t (:foreground "honeydew" :background "olivedrab"))))
 '(bold ((t (:bold t :weight bold))))
 '(bold-italic ((t (:italic t :bold t :slant italic :weight bold))))
 '(border ((t (nil))))
 '(buffer-menu-buffer ((t (:bold t :foreground "khaki" :weight bold))))
 '(button ((t (:bold t :weight bold :underline nil :foreground "MediumPurple3" :background "gray20"))))

 '(completions-annotations ((t (:underline t))))
 '(completions-common-part ((t (:foreground "ghost white" :background "gray20"))))
 '(completions-first-difference ((t (:bold t :weight bold))))

 '(cursor ((t (:background "khaki"))))

 '(dired-directory ((t (:bold t :weight bold :foreground "PaleGreen3"))))
 '(dired-flagged ((t (:bold t :weight bold :foreground "Pink"))))
 '(dired-header ((t (:bold t :weight bold :foreground "PaleGreen3"))))
 '(dired-ignored ((t (:foreground "grey70"))))
 ;; '(dired-mark ((t (:foreground "#ffa0a0"))))
 '(dired-mark ((t (:foreground "goldenrod"))))
 '(dired-marked ((t (:bold t :weight bold :foreground "DarkOrange"))))
 '(dired-perm-write ((t (:foreground "LightSkyBlue3"))))
 '(dired-symlink ((t (:foreground "khaki"))))
 '(dired-warning ((t (:bold t :weight bold :foreground "goldenrod"))))

 '(elscreen-tab-background-face ((t (:background "gray15"))))
 '(elscreen-tab-control-face
   ((t (:bold t :weight bold :foreground "goldenrod" :background "gray15" :underline nil))))
 '(elscreen-tab-current-screen-face
   ((t (:bold t :background "gray15" :foreground "goldenrod" :weight bold))))
 '(elscreen-tab-other-screen-face ((t (:background "gray15" :foreground "gray60"))))

 '(error ((t (:bold t :foreground "Pink" :weight bold))))
 '(escape-glyph ((t (:foreground "cyan"))))
 '(file-name-shadow ((t (:foreground "grey70"))))

 ;; '(font-lock-builtin-face ((t (:foreground "MediumPurple3"))))
 '(font-lock-builtin-face ((t (:foreground "moccasin"))))
 '(font-lock-comment-delimiter-face ((t (:foreground "LightSkyBlue3"))))
 '(font-lock-comment-face ((t (:foreground "LightSkyBlue3"))))
 ;; '(font-lock-constant-face ((t (:foreground "#ffa0a0"))))
 ;; '(font-lock-doc-face ((t (:foreground "IndianRed3"))))
 '(font-lock-constant-face ((t (:foreground "salmon1"))))
 '(font-lock-doc-face ((t (:foreground "IndianRed"))))
 '(font-lock-function-name-face ((t (:bold t :foreground "PaleGreen3" :weight bold))))
 ;; '(font-lock-function-name-face ((t (:foreground "PaleGreen3" ))))
 '(font-lock-keyword-face ((t (:foreground "khaki"))))
 ;; '(font-lock-keyword-face ((t (:bold t :foreground "khaki"))))
 '(font-lock-negation-char-face ((t (nil))))
 '(font-lock-preprocessor-face ((t (:foreground "MediumPurple3"))))
 '(font-lock-regexp-grouping-backslash ((t (:bold t :weight bold))))
 '(font-lock-regexp-grouping-construct ((t (:bold t :weight bold))))
 '(font-lock-string-face ((t (:foreground "#ffa0a0"))))
 ;; '(font-lock-string-face ((t (:foreground "IndianRed"))))
 '(font-lock-type-face ((t (:bold t :foreground "PaleGreen3" :weight bold))))
 '(font-lock-variable-name-face ((t (:foreground "ghost white"))))
 '(font-lock-warning-face ((t (:bold t :foreground "goldenrod" :weight bold))))

 '(fringe ((t (:background "gray20"))))
 '(glyphless-char ((t (:height 0.6))))
 '(header-line ((t (:background "gray15" :box (:color "gray20" :line-width 2)))))
 '(help-argument-name ((t (nil))))
 '(highlight ((t (:background "olivedrab" :foreground "khaki"))))
 '(ido-first-match ((t (:bold t :foreground "PaleGreen3" :weight bold))))
 '(ido-only-match ((t (:bold t :foreground "PaleGreen3" :weight bold))))
 '(ido-subdir ((t (:bold t :weight bold :foreground "khaki"))))

 '(isearch ((t (:background "olivedrab" :foreground "khaki"))))
 '(isearch-fail ((t (:background "red4"))))
 '(isearch-lazy-light
   ((t (:bold t :background "gray20" :foreground "ghost white" :weight bold))))

 '(italic ((t (:underline t))))

 '(jabber-activity-face ((t (:bold t :weight bold :foreground "PaleGreen3"))))
 '(jabber-activity-personal-face ((t (:bold t :foreground "#ffa0a0" :weight bold))))
 '(jabber-chat-prompt-foreign ((t (:bold t :foreground "PaleGreen3" :weight bold))))
 '(jabber-chat-prompt-local ((t (:bold t :foreground "#ffa0a0" :weight bold))))
 '(jabber-chat-prompt-system ((t (:bold t :foreground "LightSkyBlue3" :weight bold))))
 '(jabber-rare-time-face ((t (:bold t :foreground "PaleGreen3" :weight bold))))
 '(jabber-roster-user-away ((t (:foreground "IndianRed3"))))
 '(jabber-roster-user-chatty ((t (:bold t :foreground "PaleGreen3" :weight bold))))
 '(jabber-roster-user-dnd ((t (:foreground "LightSkyBlue3"))))
 '(jabber-roster-user-error ((t (:bold t :weight bold :foreground "goldenrod"))))
 '(jabber-roster-user-offline ((t (:background "gray20" :foreground "gray40"))))
 '(jabber-roster-user-online ((t (:bold t :foreground "khaki" :weight bold))))
 '(jabber-roster-user-xa ((t (:foreground "IndianRed3"))))
 '(jabber-title-large ((t (:bold t :weight bold :height 1.728))))
 '(jabber-title-medium ((t (:bold t :weight bold :height 1.44))))
 '(jabber-title-small ((t (:bold t :weight bold :height 1.2))))

 '(lazy-highlight ((t (:background "paleturquoise4"))))
 '(link ((t (:bold t :background "gray20" :foreground "MediumPurple3" :underline nil :weight bold))))
 '(link-visited ((t (:bold t :underline nil :foreground "MediumPurple3" :background "gray20" :weight bold))))
 '(linum ((t (:background "gray20" :foreground "yellow"))))
 '(match ((t (:bold t :weight bold))))
 '(menu ((t (nil))))
 '(minibuffer-prompt ((t (:bold t :foreground "khaki" :weight bold))))

 '(mode-line
   ((t (:box (:color "gray15" :line-width 1)
             :background "gray15" :foreground "gray60"))))
 '(mode-line-buffer-id
   ((t (:bold t :background "gray15" :box (:color "gray20" :line-width 2)
              :foreground "goldenrod" :weight bold))))
 '(mode-line-emphasis ((t (:bold t :weight bold))))
 '(mode-line-highlight ((t (:box (:line-width 2 :color "grey40" :style released-button)))))
 '(mode-line-inactive
   ((t (:foreground "gray60" :background "gray15"
                    :box (:color "gray15" :line-width 1)))))

 '(mouse ((t (:background "khaki"))))
 '(next-error ((t (:background "olivedrab" :foreground "khaki"))))
 '(nobreak-space ((t (:foreground "cyan" :underline t))))
 '(query-replace ((t (:foreground "khaki" :background "olivedrab"))))
 '(region ((t (:foreground "khaki" :background "olivedrab"))))
 '(scroll-bar ((t (nil))))
 '(secondary-selection ((t (:background "SkyBlue4"))))
 '(shadow ((t (:foreground "grey70"))))
 '(show-paren-match ((t (:bold t :foreground "PaleGreen3" :weight bold))))
 '(show-paren-mismatch ((t (:bold t :foreground "goldenrod" :weight bold))))
 '(success ((t (:bold t :foreground "Green1" :weight bold))))
 '(tool-bar
   ((t (:background "grey75" :foreground "black" :box (:line-width 1 :style released-button)))))
 '(tooltip ((t (:background "lightyellow" :foreground "black"))))
 '(trailing-whitespace ((t (:bold t :weight bold :foreground "goldenrod"))))
 '(underline ((t (:underline t))))

 '(vertical-border ((t (:foreground "gray10" ))))
 '(warning ((t (:bold t :foreground "DarkOrange" :weight bold))))
 '(widget-button ((t (:bold t :weight bold))))
 '(widget-button-pressed ((t (:foreground "red1"))))
 '(widget-documentation ((t (:foreground "lime green"))))
 '(widget-field ((t (:background "dim gray"))))
 '(widget-inactive ((t (:foreground "grey70"))))
 '(widget-single-line-field ((t (:background "dim gray")))) )                       
#+END_SRC

* Test
DEADLINE: <2019-06-06 Thu> SCHEDULED: <2019-06-06 Thu>
:LOGBOOK:
CLOCK: [2019-06-06 Thu 20:43]--[2019-06-06 Thu 21:53] =>  1:10
CLOCK: [2019-06-06 Thu 20:42]--[2019-06-06 Thu 20:42] =>  0:00
:END:
#+BEGIN_SRC elisp
;(require 'org-crypt)
(getenv "PATH")
(executable-find "dvipng")
(executable-find "dvisvgm")
(executable-find "auctex")
(type-of (file-expand-wildcards "*.*"))
(global-set-key (kbd "<f12>") 'org-agenda)
;(setq org-latex-pdf-process '("xelatex -interaction nonstopmode %f"
;                              "xelatex -interaction nonstopmode %f"))
#+END_SRC

#+BEGIN_SRC elisp
(defun z/nikola-deplot () 
  (interactive)
  (venv-with-virtualenv "blog" (shell-command "cd ~/nutstore/2017pc/lab/fp/"))
)
#+END_SRC

* Todos [12/13]
DEADLINE: <2019-06-06 Thu> SCHEDULED: <2019-06-06 Thu>
- [X] SPC-TAB spacemacs/alternate-buffer
- [X] SPC-f-e-R dotspacemacs/sync-configuration-layers
- [X] org bable source defualt-hidden
- [X] org-indent-mode add org-mode-hooks 
- [X] youdao-dictionary
- [X] magit
- [X] hydra
- [X] snippets
- [X] company
- [X] Buffer 在新窗口中打开函数 快捷键
- [ ] 窗口锁屏, 显示启动界面
- [X] Latex预览
- [X] org主题和coding主题设置
  
  
