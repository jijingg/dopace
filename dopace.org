#+TITLE: Dopace(a emacs configuration)
#+AUTHOR: jijing
#+EMAIL: goco.v@163.com
#+LATEX_HEADER: \usepackage{xeCJK}
#+LATEX_HEADER: \setCJKmainfont{SimSun}

* Basic-Config
** ELPA source
Use-package allows for isolation of package configuration, while
maintaining tidiness and performance.
#+BEGIN_SRC emacs-lisp
(when (>= emacs-major-version 24)
  (require 'package)
  (package-initialize)
  (setq package-archives '(
      ("melpa"  .  "http://mirrors.tuna.tsinghua.edu.cn/elpa/melpa/")
      ("gnu"    .  "http://mirrors.tuna.tsinghua.edu.cn/elpa/gnu/")
      ("org"    .  "http://mirrors.tuna.tsinghua.edu.cn/elpa/org/")))
)

(defun packages-require (&rest packs)
  "Install and load a package. If the package is not available
   installs it automaticaly."
  (mapc  (lambda (package)
           (unless (package-installed-p package)
                   (package-refresh-contents)
                   (package-install package)
                   ))
         packs
         ))

;(packages-require
; use-package
; evil-leader
; )
(unless (package-installed-p 'use-package)
        (package-install 'use-package))
;默认对所有的包先检查后下载
(setq use-package-always-ensure t)
;ensure nil 表示不下载，用当前elpa路径下的包 , 对于built-in 或者本地第三方
;package 加上 :ensure nil 或者 :load-path就行了

; (unless (package-installed-p 'use-package)
;   (package-refresh-contents)
;   (package-install 'use-package))
;
; (require 'use-package)
; (setq use-package-always-ensure t)
;

(use-package exec-path-from-shell
  :ensure t
  :if (memq window-system '(mac ns))
  :config
  (exec-path-from-shell-initialize))
#+END_SRC

Enable evil-leader First
#+BEGIN_SRC emacs-lisp
(use-package evil-leader
    :config
    (global-evil-leader-mode)
    (evil-leader/set-leader "<SPC>")
)
#+END_SRC

** BaseConfig
#+BEGIN_SRC emacs-lisp
(setq custom-file "~/.emacs.d/custom.el")
(tool-bar-mode -1)
(display-time-mode 1)
(menu-bar-mode -1)

;;自动加载文件改动
(global-auto-revert-mode 1)

(scroll-bar-mode -1)

(add-hook 'emacs-lisp-mode-hook 'show-paren-mode)

(prefer-coding-system 'utf-8)
(setq default-buffer-file-coding-system 'utf-8)

(setq-default indent-tabs-mode nil)
(setq-default tab-width 2)
(setq indent-line-function 'insert-tab)

(setq make-backup-files nil)		; xxx.xx~
(setq auto-save-default nil)		; #xxx.xx#

(require 'recentf)
(recentf-mode 1)
(global-set-key (kbd "C-c a")  'org-agenda)
(global-set-key (kbd "C-c c")  'org-capture)
#+END_SRC

* OS-setup
** os-init
#+BEGIN_SRC emacs-lisp
(defun windows-setup ()
    (setq
    font-height 110
    font-size 13
    org-plantuml-jar-path (expand-file-name "d:/Program/emacs-26.2/plantuml.jar")
    default-directory "D:/Program/emacs-26.2/work"
    os-shell-root "c:/Users/Administrator/.babun/cygwin/bin/"
    config-base-dir "E:/nutstore/2017pc")
    (message "windows-setup done!")
    )

(defun mac-os-setup ()
    (setq
    font-height 160
    font-size 14
    org-plantuml-jar-path (expand-file-name "~/local/lib/plantuml.jar")
    default-directory "~/work"
    os-shell-root "/bin/"
    config-base-dir "~/nutstore/2017pc")
    (message "mac-os-setup done!")
    )

(defun linux-setup ()
    (setq
    font-height 120
    font-size 13
    org-plantuml-jar-path (expand-file-name "~/local/lib/plantuml.jar")
    default-directory "~/work"
    os-shell-root "/usr/bin/"
    config-base-dir "~/lab/")
    (message "linux-setup done!")
    )

(cl-case system-type
    (windows-nt  (windows-setup ))
    (darwin      (mac-os-setup  ))
    (gnu/linux   (linux-setup   ))
)
(setq
    org-agenda-dir  (concat config-base-dir "/org/")
    )

#+END_SRC

** Font-config
#+BEGIN_SRC emacs-lisp
(set-face-attribute 'default nil
  :family "Consolas" :height font-height)

;; Setting Chinese Font
(dolist (charset '(kana han symbol cjk-misc bopomofo))
  (set-fontset-font (frame-parameter nil 'font)
            charset
            (font-spec :family "Microsoft Yahei" :size font-size)))
#+END_SRC

* Utils
** loop-alpha
#+BEGIN_SRC emacs-lisp
(setq alpha-list '((85 55) (100 100)))
(defun dopace-loop-alpha ()
  (interactive)
  (let ((h (car alpha-list)))
    ((lambda (a ab)
       (set-frame-parameter (selected-frame) 'alpha (list a ab))
       (add-to-list 'default-frame-alist (cons 'alpha (list a ab)))
       ) (car h) (car (cdr h)))
    (setq alpha-list (cdr (append alpha-list (list h))))
    ))

(evil-leader/set-key
    "tt" 'dopace-loop-alpha
    "tf" 'toggle-frame-fullscreen
)
#+END_SRC

** open-config-file
#+BEGIN_SRC emacs-lisp
(defun dopace-utils/open-init-config-file ()
  "Show FAQ and launch swiper session."
  (interactive)
  (find-file-read-only
   (expand-file-name "init.el" (concat config-base-dir "/config.org")))
  (swiper " user-config"))

(evil-leader/set-key
 "fi" 'dopace-utils/open-init-config-file
)
#+END_SRC

** Hide Source block as defualt Org-mode
#+begin_src elisp
(defun dopace-visibility-source-blocks ()
  "Fold some blocks in the current buffer."
  (interactive)
  (org-show-block-all)
  (org-block-map
   (lambda ()
     (let ((case-fold-search t))
       (when (and
              (save-excursion
                (beginning-of-line 1)
                (looking-at org-block-regexp))
              (cl-assoc
               ':hidden
               (cl-third
                (org-babel-get-src-block-info))))
         (org-hide-block-toggle))))))

(add-hook 'org-mode-hook 'dopace-visibility-source-blocks)
#+end_src

* Package-Manager
** Packages
*** modeline

#+BEGIN_SRC emacs-lisp
(use-package doom-modeline
      :ensure t
      :hook (after-init . doom-modeline-mode)
      :config
      (setq doom-modeline-bar-width 4)
      (setq doom-modeline-height 20)
)
#+END_SRC

*** evil-mode
#+BEGIN_SRC emacs-lisp
(use-package evil
      :ensure t
      :hook (after-init . evil-mode))
#+END_SRC

*** which-key
#+BEGIN_SRC emacs-lisp
(use-package which-key
    :ensure t
    :config
    (which-key-mode +1)
)
#+END_SRC
with ivy 
*** doom-theme
#+BEGIN_SRC emacs-lisp
(use-package doom-themes
:disabled t
:config
(load-theme 'doom-one 1)
)
#+END_SRC
defualt coding theme
*** ivy
#+BEGIN_SRC emacs-lisp
(use-package ivy
:ensure t
:config
(ivy-mode 1)
(setq ivy-use-virtual-buffers t)
(setq enable-recursive-minibuffers t)
(global-set-key "\C-s" 'swiper)
  (evil-leader/set-key
    "M-x" 'counsel-M-x
    "ff"  'counsel-find-file
    "fb"  'counsel-bookmark
    "fr"  'counsel-recentf
    "rl"  'ivy-resume
  )
)
#+END_SRC
默认没有历史记录， M-x M-p 会调出历史记录
*** smex
#+BEGIN_SRC  emacs-lisp
(use-package smex
:ensure t
)
#+END_SRC
for ivy history using 
*** evil-leader
*** eyebrowse
#+BEGIN_SRC emacs-lisp
(use-package eyebrowse
  :init
  (setq eyebrowse-new-workspace t
        eyebrowse-wrap-around t)
  :config
  (eyebrowse-mode)
  (evil-leader/set-key
    "lp" 'eyebrowse-prev-window-config
    "ln" 'eyebrowse-next-window-config
    "ld" 'eyebrowse-close-window-config
    "lr" 'eyebrowse-rename-window-config
    "l." 'eyebrowse-switch-to-window-config
    "l0" 'eyebrowse-switch-to-window-config-0
    "l1" 'eyebrowse-switch-to-window-config-1
    "l2" 'eyebrowse-switch-to-window-config-2
    "l3" 'eyebrowse-switch-to-window-config-3
    "l4" 'eyebrowse-switch-to-window-config-4
    "l5" 'eyebrowse-switch-to-window-config-5
    "l6" 'eyebrowse-switch-to-window-config-6
    "l7" 'eyebrowse-switch-to-window-config-7
    "l8" 'eyebrowse-switch-to-window-config-8
    "l9" 'eyebrowse-switch-to-window-config-9
    "lc" 'eyebrowse-create-window-config
    "ll" 'eyebrowse-last-window-config
  )
)
#+END_SRC
#+BEGIN_SRC lisp-disabeld
;;; 存入 `~/.emacs.d/ivy-views'文件中
(defun peng-save-ivy-views ()
  (interactive)
  (with-temp-file "~/.emacs.d/ivy-views"
    (prin1 ivy-views (current-buffer))
    (message "save ivy-views to ~/.emacs.d/ivy-views")))
;;; 从文件中加载
(defun peng-load-ivy-views ()
  (interactive)
  (setq ivy-views
        (with-temp-buffer
          (insert-file-contents "~/.emacs.d/ivy-views")
          (read (current-buffer))))
  (message "load ivy-views"))

;;; 清除所有的views
(defun peng-clear-ivy-views ()
  (interactive)
  (setq ivy-views nil))

;;; 退出自动保存
(add-hook 'kill-emacs-hook #'(lambda ()
                               (peng-save-ivy-views)))

;;; 启动自动加载
(add-hook 'emacs-startup-hook #'(lambda ()
                               (peng-load-ivy-views)))

#+END_SRC

*** projectile
#+BEGIN_SRC emacs-lisp
(use-package counsel-projectile
    :ensure t
    :config
    (counsel-projectile-mode)
    (evil-leader/set-key
        "p" 'projectile-command-map
    )
)
#+END_SRC
~M-x projectile-invalidate-cache~ to clear project cache
*** winum
#+BEGIN_SRC emacs-lisp
(use-package winum
:config
(winum-mode)
  (evil-leader/set-key
    "0" 'winum-select-window-0-or-10
    "1" 'winum-select-window-1
    "2" 'winum-select-window-2
    "3" 'winum-select-window-3
    "4" 'winum-select-window-4
    "5" 'winum-select-window-5
    "6" 'winum-select-window-6
  )
)
#+END_SRC

*** helm-ag
#+BEGIN_SRC emacs-lisp
(use-package helm-ag
:config
(setq
    helm-follow-mode-persistent t)
(evil-leader/set-key
  "ag" 'helm-ag
)
)
#+END_SRC

*** ace-jump
#+BEGIN_SRC emacs-lisp
(use-package ace-jump-mode
:config
(evil-leader/set-key
"<SPC>" 'ace-jump-mode
; "<SPC>" 'ace-jump-char-mode
)
)
#+END_SRC

*** ensime
#+BEGIN_SRC emacs-lisp
(use-package ensime
  ; :pin melpa ;; pining to melpa uses cutting-edge snapshot version
  :commands ensime ensime-mode
  :init
  :config
  (require 'ensime-expand-region)
  (setq ensime-startup-notification nil
  ensime-startup-snapshot-notification nil))
#+END_SRC

*** commentary
#+begin_src emacs-lisp
(use-package evil-commentary
:config
(evil-commentary-mode)
)
#+end_src

* KeyBindings
** Inctroductions(Not config)
*** global key maps
~(global-set-key (kbd "C-c b") 'bbdb)~
*** specfic mode keymap
~(define-key text-mode-map (kbd "'") 'maybe-open-apostrophe)~
~M-x describe-mode~ to show all modes in current buffer
#+begin_src
(local-set-key (kbd "C-c q") (lambda () (interactive) (message "Hi Local Hook")))
(defun localhooktest ()
  (local-set-key (kbd "C-c q") (lambda () (interactive) (message "Hi Local Hook"))))
(add-hook 'org-mode-hook 'localhooktest)
#+end_src

*** binding after load
~(eval-after-load 'text-mode '(define-key text-mode-map (kbd "'") 'maybe-open-apostrophe))~
*** remove keybindings
~(global-unset-key (kbd "C-c b")~
*** prefix-key
#+begin_example
(define-prefix-command 'ctl-z-map)
(global-set-key (kbd "C-z") 'ctl-z-map)
(global-set-key (kbd "C-z C-c C-w b") 'find-file)
#+end_example

** layouts
** windows
#+BEGIN_SRC emacs-lisp
(defun split-window-below-and-focus ()
  "Split the window vertically and focus the new window."
  (interactive)
  (split-window-below)
  (windmove-down)
  (when (and (boundp 'golden-ratio-mode)
             (symbol-value golden-ratio-mode))
    (golden-ratio)))

(defun split-window-right-and-focus ()
  "Split the window horizontally and focus the new window."
  (interactive)
  (split-window-right)
  (windmove-right)
  (when (and (boundp 'golden-ratio-mode)
             (symbol-value golden-ratio-mode))
    (golden-ratio)))
#+END_SRC

#+BEGIN_SRC emacs-lisp
  (evil-leader/set-key
    "w=" 'balance-windows
    "wl" 'evil-window-right
    "wh" 'evil-window-left
    "wk" 'evil-window-up
    "wj" 'evil-window-down
    "wL" 'evil-window-move-far-right
    "wH" 'evil-window-move-far-left
    "wK" 'evil-window-move-very-top
    "wJ" 'evil-window-move-very-bottom
    "w-" 'split-window-below-and-focus
    "w/" 'split-window-right-and-focus
    "wv" 'split-window-below
    "ws" 'split-window-right
    "ws" 'other-window
    "wd" 'delete-window
    "wc" 'centered-buffer-mode
    "wb" 'switch-to-minibuffer-window
    )
#+END_SRC

** buffer
*** Keybidings
#+BEGIN_SRC emacs-lisp
(evil-leader/set-key
"bb" 'ivy-switch-buffer
"bh" 'home
"bn" 'next-buffer
"bp" 'previous-buffer
"bm" 'kill-other-buffer
"bd" 'kill-this-buffer
;"b." 'buffer-transient-state
)
#+END_SRC

*** 快速切换上一个buffer，摘自spacemacs
#+begin_src emacs-lisp
(defun spacemacs/alternate-buffer (&optional window)
  "Switch back and forth between current and last buffer in the
current window."
  (interactive)
  (let ((current-buffer (window-buffer window))
        (buffer-predicate
         (frame-parameter (window-frame window) 'buffer-predicate)))
    ;; switch to first buffer previously shown in this window that matches
    ;; frame-parameter `buffer-predicate'
    (switch-to-buffer
     (or (cl-find-if (lambda (buffer)
                       (and (not (eq buffer current-buffer))
                            (or (null buffer-predicate)
                                (funcall buffer-predicate buffer))))
                     (mapcar #'car (window-prev-buffers window)))
         ;; `other-buffer' honors `buffer-predicate' so no need to filter
         (other-buffer current-buffer t)))))

(evil-leader/set-key "<tab>" #'spacemacs/alternate-buffer )
#+end_src

** projec
** +file
#+BEGIN_SRC emacs-lisp
(evil-leader/set-key
"fc" 'copy-file
"fh" 'hexl-find-file
"fs" 'save-buffer
)
(evil-leader/set-key
"ma" 'bookmark-set
"mj" 'bookmark-jump
"md" 'bookmark-delete
"ml" 'bookmark-bmenu-list
)
#+END_SRC

** toggle
#+BEGIN_SRC emacs-lisp
(evil-leader/set-key
    "tl" 'linum-mode
    "tp" 'org-toggle-inline-images
)
#+END_SRC

* Org-mode
** setup
=M-x customize-group RET org-appearance RET=
=M-x customize-group RET org-faces RET=
~face~
*face*
/italic/
+shanchuxian+
_xiahuaxian_
E=mc^2

#+BEGIN_SRC emacs-lisp
(use-package org
  :mode ("\\.org\\'" . org-mode)
    :bind
    (("C-c l" . org-store-link)
    ("C-c a" . org-agenda)
    ("C-c b" . org-iswitchb)
    ("C-c c" . org-capture))
    :bind
    (:map org-mode-map
    ("M-n" . outline-next-visible-heading)
    ("M-p" . outline-previous-visible-heading))
    :custom
    (org-src-window-setup 'current-window)
    (org-return-follows-link t)
    (org-babel-load-languages
    '((emacs-lisp . t)
        (python . t)))
    (org-use-speed-commands t)
    (org-catch-invisible-edits 'show)
    :custom-face
    (org-default ((t (:inherit default :background "snow"))))  
    (variable-pitch ((t (:family "iA Writer Duospace" :height 0.9))))
    (org-document-title ((t (:weight bold :height 1.3 :slant italic))))
    (org-meta-line ((t (:inherit font-lock-comment-face :foreground "chocolate3" :slant italic :height 0.94))))
    (org-date ((t (:foreground "chocolate3" :underline t :slant italic :height 0.94)))) ;DATA
    (org-document-info-keyword ((t (:inherit shadow :foreground "snow4" :slant italic :height 0.94))))
    (org-document-info ((t (:foreground "midnight blue" :slant italic))))
    ;; (org-done ((t (:strike-through t :weight bold))))
    ;; (org-headline-done ((t (:strike-through t))))
    (org-level-1 ((t (:foreground "blue"))))
    (org-level-2 ((t (:foreground "SaddleBrown"))))
    (org-level-3 ((t (:foreground "purple"))))
    (org-block-begin-line ((t (:foreground "#a98" :background "#fff4ea" :slant italic :underline t))))
    (org-block-end-line ((t (:foreground "#a98" :background "#fff4ea" :slant italic :underline t))))
    (org-block ((t (:background "#fffef5"))))
    (org-quote ((t (:background "#0ffef5"))))
    (org-special-keyword ((t (:foreground "chocolate3" :slant italic :height 0.94)))) ;DEDLINE SCHEDUE
    (org-image-actual-width (/ (display-pixel-width) 2))
    ;; :custom
    ;; (org-structure-template-alist '(("a" . "export ascii")
    ;;                                 ("c" . "center")
    ;;                                 ("C" . "comment")
    ;;                                 ("e" . "example")
    ;;                                 ("E" . "export")
    ;;                                 ("h" . "export html")
    ;;                                 ("l" . "export latex")
    ;;                                 ("q" . "quote")
    ;;                                 ("s" . "src")
    ;;                                 ("v" . "verse")
    ;;                                 ("el" . "src emacs-lisp")
    ;;                                 ("d" . "definition")
    ;;                                 ("t" . "theorem")))
    :config
    (setq system-time-locale "C")       ;set date english format
    (setq org-startup-indented t)
    (require 'org-habit)
    (when (version<= "9.2" (org-version))
    (require 'org-tempo))

    (setq org-latex-pdf-process '("xelatex -interaction nonstopmode %f"
                            "xelatex -interaction nonstopmode %f"))
    (setq org-latex-default-packages-alist
    (remove '("AUTO" "inputenc" t) org-latex-default-packages-alist))
    )
#+END_SRC

:PROPERTIES:
:reveal_background: ./images/whale.jpg
:reveal_background_size: 200px
:reveal_background_repeat: repeat
:END:

#+BEGIN_SRC elisp
(mode-line italic mode-line)
;; First create new face which is a copy of hl-line-face
(copy-face 'hl-line 'hl-line-agenda-face)

;; Change what you want in this new face 
(set-face-attribute 'hl-line-agenda-face nil
                    :box '(:color "deep pink" :line-width 2))

;; The function to use the new face
(defun my-org-agenda-hl-line ()
  (set (make-local-variable 'hl-line-face) ; This is how to make it local
       'hl-line-agenda-face)
    (hl-line-mode))

;; Finally, the hook
(add-hook 'org-agenda-mode-hook 'my-org-agenda-hl-line)

#+END_SRC

** Org-GTD     
** Org-Blog
** Org-export
** Exporting PDFs

如果使用xelatex，需要将一下头添加到org文件头
#+begin_example
#+LATEX_HEADER: \usepackage{xeCJK}
#+LATEX_HEADER: \setCJKmainfont{SimSun}
#+end_example

如果使用pdflatex，修改为
#+begin_example
#+LATEX_HEADER: \usepackage[UTF8]{ctex}
#+LATEX_HEADER: \setCJKmainfont{SimSun}
#+end_example

xelatex比较新,对UTF的支持更傻瓜，但是对有些旧的宏可能不支持。
而pdflatex对宏的支持更全面，排版个人觉得更为好看，只不过体积有点大

I use export to LaTeX through ox-latex, using xelatex for a nicer export template.
#+begin_src emacs-lisp
(use-package ox-latex
  :disabled t
    :after org
    :ensure nil
    :config
    :custom
    (org-latex-pdf-process
     (list "latexmk -shell-escape -bibtex -f -pdf %f"
           "latexmk -shell-escape -bibtex -f -pdf %f"))
    (org-latex-default-table-environment "tabular")
    (org-latex-tables-booktabs t)
    (org-latex-listings 'minted)
    (org-format-latex-options (plist-put org-format-latex-options :scale 2.0))
    (org-latex-classes
     '(("article"
        "\\documentclass{article}
  \\usepackage[margin=1in]{geometry}
  \\usepackage{amsmath,amsthm,amssymb}
  \\newtheorem{definition}{Definition}
  \\newtheorem{theorem}{Theorem}

  \\usepackage{booktabs}
  \\usepackage{hyperref}
  \\usepackage{minted}
  \\usepackage{tabularx}
  \\usepackage{parskip}
  \\linespread{1.1}"
        ("\\section{%s}" . "\\section*{%s}")
        ("\\subsection{%s}" . "\\subsection*{%s}")
        ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
        ("\\paragraph{%s}" . "\\paragraph*{%s}")
        ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
       ("book"
        "\\documentclass[10pt]{memoir}
                          \\usepackage{charter}
                          \\usepackage[T1]{fontenc}
                          \\usepackage{booktabs}
                          \\usepackage{amsmath}
                          \\usepackage{minted}
                          \\usemintedstyle{borland}
                          \\usepackage{color}
                          \\usepackage{epigraph}
                          \\usepackage{enumitem}
                          \\setlist{nosep}
                          \\setlength\\epigraphwidth{13cm}
                          \\setlength\\epigraphrule{0pt}
                          \\usepackage{fontspec}
                          \\usepackage{graphicx}
                          \\usepackage{hyperref}
                          \\hypersetup {colorlinks = true, allcolors = red}
                          \\title{}
                          [NO-DEFAULT-PACKAGES]
                          [NO-PACKAGES]"
        ("\\chapter{%s}" . "\\chapter*{%s}")
        ("\\section{%s}" . "\\section*{%s}")
        ("\\subsection{%s}" . "\\subsection*{%s}")
        ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
        ("\\paragraph{%s}" . "\\paragraph*{%s}")
        ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))
       ("latex-notes"
        "\\documentclass[8pt]{article}
    \\usepackage[margin={0.1in,0.1in}, a4paper,landscape]{geometry}
    \\usepackage{hyperref}
    \\usepackage{amsmath}
    \\usepackage{multicol}
    \\usepackage{booktabs}
    \\usepackage{enumitem}
    \\usepackage[compact]{titlesec}
    \\renewcommand\\maketitle{}
    \\titlespacing{\\section}{0pt}{*2}{*0}
    \\titlespacing{\\subsection}{0pt}{*2}{*0}
    \\titlespacing{\\subsubsection}{0pt}{*2}{*0}
    \\titleformat*{\\section}{\\large\\bfseries}
    \\titleformat*{\\subsection}{\\normalsize\\bfseries}
    \\titleformat*{\\subsubsection}{\\normalsize\\bfseries}
    \\setlist[itemize]{leftmargin=*}
    \\setlist[enumerate]{leftmargin=*}
    \\setlength\\columnsep{5pt}
    \\setlength{\\columnseprule}{1pt}
    \\setlength{\\parindent}{0cm}
    \\usepackage{setspace}
    \\singlespacing
    \\setlist{nosep}
    \\usepackage{minted}
    \\usemintedstyle{bw}
    \\usemintedstyle[java]{bw}
    \\setminted[]{frame=none,fontsize=\\footnotesize,linenos=false}
    "
        ("\\section{%s}" . "\\section*{%s}")
        ("\\subsection{%s}" . "\\subsection*{%s}")
        ("\\subsubsection{%s}" . "\\subsubsection*{%s}")
        ("\\paragraph{%s}" . "\\paragraph*{%s}")
        ("\\subparagraph{%s}" . "\\subparagraph*{%s}"))))
    :config
    (defvar-local jethro/org-multicol-latex-column-count
      3
      "Column count for multicolumn export.")

    (defun jethro/org-multicol-to-pdf (async subtreep visible-only body-only)
      (let ((contents (buffer-string))
            (buffer-name (file-name-sans-extension buffer-file-name))
            (col-count jethro/org-multicol-latex-column-count))
        (with-temp-buffer
          (insert "#+LATEX_CLASS: latex-notes\n")
          (insert contents)
          (goto-char (point-min))
          (org-next-visible-heading 1)
          (insert
           (format "#+BEGIN_EXPORT latex\n\\begin{multicols*}{%s}\n#+END_EXPORT\n" col-count))
          (goto-char (point-max))
          (insert "#+BEGIN_EXPORT latex\n\\end{multicols*}\n#+END_EXPORT")
          (org-export-to-file 'latex (format "%s.tex" buffer-name)
            async subtreep visible-only body-only nil (lambda (file) (org-latex-compile file))))))

    (org-export-define-derived-backend 'latex-notes 'latex
      :menu-entry
      '(?L "Export to LaTeX notes"
           ((?p "Export to PDF" jethro/org-multicol-to-pdf)))))
#+end_src

** Org-formula-preview
#+begin_src emacs-lisp

#+end_src

** Auctex
#+begin_src emacs-lisp
(use-package auctex
:defer t
:ensure t
:config
(setq TeX-auto-save t)
(setq TeX-parse-self t)
)
(executable-find "dvipng")
#+end_src
AUCTEX is an extensible package for writing and formatting TEX files in GNU Emacs. It supports many different TEX macro packages, including AMS-TEX, LATEX, Texinfo, ConTEXt, and docTEX (dtx files).
可以用来预览org-mode中的latex公式（M-x org-toggle-latex-fragment)

预览时遇到问题：
org-compile-file: File "c:/Users/ADMINI~1/AppData/Local/Temp/orgtexIbqETP.dvi" wasn’t produced.  Please adjust ‘dvipng’ part of ‘org-preview-latex-process-alist’.
就是auctex没有安装导致的

** Automatic latex image toggling when cursor is on a fragment
#+begin_src elisp
(defvar org-latex-fragment-last nil
  "Holds last fragment/environment you were on.")

(defun org-latex-fragment-toggle ()
  "Toggle a latex fragment image "
  (and (eq 'org-mode major-mode)
       (let* ((el (org-element-context))
              (el-type (car el)))
         (cond
          ;; were on a fragment and now on a new fragment
          ((and
            ;; fragment we were on
            org-latex-fragment-last
            ;; and are on a fragment now
            (or
             (eq 'latex-fragment el-type)
             (eq 'latex-environment el-type))
            ;; but not on the last one this is a little tricky. as you edit the
            ;; fragment, it is not equal to the last one. We use the begin
            ;; property which is less likely to change for the comparison.
            (not (= (org-element-property :begin el)
                    (org-element-property :begin org-latex-fragment-last))))
           ;; go back to last one and put image back
           (save-excursion
             (goto-char (org-element-property :begin org-latex-fragment-last))
             (org-preview-latex-fragment))
           ;; now remove current image
           (goto-char (org-element-property :begin el))
           (let ((ov (loop for ov in org-latex-fragment-image-overlays
                           if
                           (and
                            (<= (overlay-start ov) (point))
                            (>= (overlay-end ov) (point)))
                           return ov)))
             (when ov
               (delete-overlay ov)))
           ;; and save new fragment
           (setq org-latex-fragment-last el))

          ;; were on a fragment and now are not on a fragment
          ((and
            ;; not on a fragment now
            (not (or
                  (eq 'latex-fragment el-type)
                  (eq 'latex-environment el-type)))
            ;; but we were on one
            org-latex-fragment-last)
           ;; put image back on
           (save-excursion
             (goto-char (org-element-property :begin org-latex-fragment-last))
             (org-preview-latex-fragment))
           ;; unset last fragment
           (setq org-latex-fragment-last nil))

          ;; were not on a fragment, and now are
          ((and
            ;; we were not one one
            (not org-latex-fragment-last)
            ;; but now we are
            (or
             (eq 'latex-fragment el-type)
             (eq 'latex-environment el-type)))
           (goto-char (org-element-property :begin el))
           ;; remove image
           (let ((ov (loop for ov in org-latex-fragment-image-overlays
                           if
                           (and
                            (<= (overlay-start ov) (point))
                            (>= (overlay-end ov) (point)))
                           return ov)))
             (when ov
               (delete-overlay ov)))
           (setq org-latex-fragment-last el))))))


(add-hook 'post-command-hook 'org-latex-fragment-toggle)

#+end_src

* Program-Language
** Python
** Scala
** Lisp
** Verilog
** C
* TODO Test
DEADLINE: <2019-06-06 Thu> SCHEDULED: <2019-06-06 Thu>
:LOGBOOK:
CLOCK: [2019-06-06 Thu 20:43]--[2019-06-06 Thu 21:53] =>  1:10
CLOCK: [2019-06-06 Thu 20:42]--[2019-06-06 Thu 20:42] =>  0:00
:END:

#+BEGIN_SRC elisp
;(require 'org-crypt)
(getenv "PATH")
(executable-find "dvipng")
(executable-find "auctex")
(type-of (file-expand-wildcards "*.*"))
(global-set-key (kbd "<f12>") 'org-agenda)
;(setq org-latex-pdf-process '("xelatex -interaction nonstopmode %f"
;                              "xelatex -interaction nonstopmode %f"))
#+END_SRC

* Todos [1/9]
DEADLINE: <2019-06-06 Thu> SCHEDULED: <2019-06-06 Thu>
- [X] SPC-TAB spacemacs/alternate-buffer
- [ ] SPC-f-e-R dotspacemacs/sync-configuration-layers
#+begin_src
(defun dotspacemacs/sync-configuration-layers (&optional arg)
  "Synchronize declared layers in dotfile with spacemacs.

Called with `C-u' skips `dotspacemacs/user-config'.
Called with `C-u C-u' skips `dotspacemacs/user-config' _and_ preleminary tests."
  (interactive "P")
  (when (file-exists-p dotspacemacs-filepath)
    (with-current-buffer (find-file-noselect dotspacemacs-filepath)
      (let ((dotspacemacs-loading-progress-bar nil))
        (setq spacemacs-loading-string "")
        (save-buffer)
        (let ((tests-ok (or (equal arg '(16)) (dotspacemacs/test-dotfile t))))
          (if tests-ok
              (progn
                (load-file buffer-file-name)
                (dotspacemacs|call-func dotspacemacs/init
                                        "Calling dotfile init...")
                (dotspacemacs|call-func dotspacemacs/user-init
                                        "Calling dotfile user init...")
                (setq dotspacemacs-editing-style
                      (dotspacemacs//read-editing-style-config
                       dotspacemacs-editing-style))
                (configuration-layer/sync)
                (if (member arg '((4) (16)))
                    (message (concat "Done (`dotspacemacs/user-config' "
                                     "function has been skipped)."))
                  (dotspacemacs|call-func dotspacemacs/user-config
                                          "Calling dotfile user config...")
                  (run-hooks 'spacemacs-post-user-config-hook)
                  (message "Done.")))
            (switch-to-buffer-other-window dotspacemacs-test-results-buffer)
            (spacemacs-buffer/warning "Some tests failed, check `%s' buffer"
                                      dotspacemacs-test-results-buffer))))))
  (when (configuration-layer/package-usedp 'spaceline)
    (spacemacs//set-powerline-for-startup-buffers)))
#+end_src
- [ ] org bable source defualt-hidden
- [ ] org-indent-mode add org-mode-hooks - [ ] company
- [ ] youdao-dictionary
- [ ] smartparens
- [ ] snippets
- [ ] Buffer 在新窗口中打开函数 快捷键
- [ ] 窗口锁屏, 显示启动界面
